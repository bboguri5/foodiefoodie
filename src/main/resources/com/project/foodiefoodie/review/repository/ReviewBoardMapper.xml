<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.foodiefoodie.review.repository.ReviewBoardMapper">

    <resultMap id="rbMap" type="com.project.foodiefoodie.review.domain.ReviewBoard">
        <result property="businessNo" column="business_no"/>
        <result property="reviewBno" column="review_bno"/>
        <result property="lastUpdated" column="last_updated"/>
        <result property="likeCnt" column="like_cnt"/>
        <result property="starRate" column="star_rate"/>
        <result property="isPrivate" column="private"/>
        <result property="reportCnt" column="report_cnt"/>
        <result property="storeName" column="store_name"/>
        <result property="storeAddress" column="store_address"/>
        <result property="storeDetailAddress" column="store_detail_address"/>
        <result property="storeExtraAddress" column="store_extra_address"/>
    </resultMap>

    <resultMap id="rbDTOMap" type="com.project.foodiefoodie.review.dto.ReviewBoardDTO">
        <result property="reviewBno" column="review_bno"/>
        <result property="lastUpdated" column="last_updated"/>
        <result property="likeCnt" column="like_cnt"/>
        <result property="starRate" column="star_rate"/>
        <result property="storeName" column="store_name"/>
        <result property="storeAddress" column="store_address"/>
        <result property="storeDetailAddress" column="store_detail_address"/>
        <result property="storeExtraAddress" column="store_extra_address"/>
        <result property="businessNo" column="business_no"/>
      </resultMap>

    <resultMap id="ruMap" type="com.project.foodiefoodie.review.domain.ReviewUpload">
        <result property="reviewBno" column="review_bno"/>
        <result property="filePath" column="file_path"/>
        <result property="fileName" column="file_name"/>
        <result property="fileData" column="file_data"/>
        <result property="fileByte" column="file_byte"/>
        <result property="fileType" column="file_type"/>
        <result property="fileSize" column="file_size"/>
    </resultMap>

    <resultMap id="likeMap" type="com.project.foodiefoodie.review.domain.ReviewLike">
        <result property="reviewBno" column="review_bno"/>
    </resultMap>


    <insert id="save">
        INSERT INTO review_board (email, title, content, review_bno, business_no, star_rate
        , private, store_name, store_address, store_detail_address, store_extra_address)
        VALUES (#{email}, #{title}, #{content}, seq_review_board.nextval, #{businessNo}, #{starRate}
        , #{isPrivate}, #{storeName}, #{storeAddress}, #{storeDetailAddress}, #{storeExtraAddress})

        <!--INSERT INTO review_board (email, title, content, business_no, star_rate
        , private, store_name, store_address, store_detail_address, store_extra_address)
        VALUES (#{email}, #{title}, #{content}, #{businessNo}, #{starRate}
        , #{isPrivate}, #{storeName}, #{storeAddress}, #{storeDetailAddress}, #{storeExtraAddress})-->
    </insert>

    <!--  해당 가게 평균 평점 구하기  -->
    <select id="getStarRate" resultType="double">
        SELECT ROUND(AVG(star_rate), 2)
        FROM review_board
        WHERE business_no=#{businessNo}
    </select>

    <!--  해당 가게 리뷰 개수 구하기  -->
    <select id="getReviewCnt" resultType="Long">
        SELECT COUNT(star_rate)
        FROM review_board
        WHERE business_no=#{businessNo}
    </select>

    <select id="findAllReviews" resultMap="rbDTOMap">
        SELECT rb.review_bno, rb.business_no, rb.email, rb.title, rb.content, rb.last_updated, rb.star_rate, rb.like_cnt
        , rb.store_name, rb.store_address, rb.store_detail_address, rb.store_extra_address
        FROM review_board rb
        WHERE private = 'F'
        <if test="sort == 'latest'">ORDER BY rb.last_updated DESC</if>
        <if test="sort == 'like'">ORDER BY rb.like_cnt DESC</if>
    </select>


    <select id="findOneReview" resultMap="rbDTOMap" resultType="long">
        SELECT rb.review_bno, rb.business_no, rb.email, rb.title, rb.content, rb.last_updated, rb.star_rate, rb.like_cnt
        , rb.store_name, rb.store_address, rb.store_detail_address, rb.store_extra_address
        FROM review_board rb
        WHERE rb.review_bno = #{reviewBno}
    </select>

    <select id="searchAllReview" resultMap="rbDTOMap">
        SELECT review_bno, email, title, content, last_updated, star_rate, like_cnt, business_no,
        store_name, store_address
        FROM review_board
        WHERE private = 'F'
        AND email LIKE '%' || #{search}|| '%'
        OR title LIKE '%' || #{search}|| '%'
        OR content LIKE '%' || #{search}|| '%'
        OR store_name LIKE '%' || #{search}|| '%'
        OR store_address LIKE '%' || #{search}|| '%'
        OR BUSINESS_NO LIKE '%' || #{search}|| '%'
        <if test="sort == 'latest'">ORDER BY last_updated DESC</if>
        <if test="sort == 'like'">ORDER BY like_cnt DESC</if>

        <!--SELECT review_bno, email, title, content, last_updated, star_rate, like_cnt, business_no,
        store_name, store_address
        FROM review_board
        WHERE private = 'F'
        AND email LIKE CONCAT('%', #{search}, '%')
        OR title LIKE CONCAT('%', #{search}, '%')
        OR content LIKE CONCAT('%', #{search}, '%')
        OR store_name LIKE CONCAT('%', #{search}, '%')
        OR store_address LIKE CONCAT('%', #{search}, '%')
        <if test="sort == 'latest'">ORDER BY last_updated DESC</if>
        <if test="sort == 'like'">ORDER BY like_cnt DESC</if>-->
    </select>

    <insert id="reviewUpload">
        INSERT INTO review_upload
        VALUES (#{reviewBno}, #{filePath}, #{fileName})
    </insert>

    <select id="findReviewUploads" resultMap="ruMap">
        SELECT review_bno, file_path, file_name, file_data, file_byte, file_type, file_size
        FROM review_upload
        WHERE review_bno = #{reviewBno}
    </select>



    <update id="upLike">
        UPDATE review_board
        SET like_cnt = (SELECT like_cnt FROM review_board WHERE review_bno = #{reviewBno}) + 1
        WHERE review_bno = #{reviewBno}
    </update>

    <update id="downLike">
        UPDATE review_board
        SET like_cnt = (SELECT like_cnt FROM review_board WHERE review_bno = #{reviewBno}) - 1
        WHERE review_bno = #{reviewBno}
    </update>

    <insert id="saveReviewLike">
        INSERT INTO review_like
        VALUES (#{reviewBno}, #{email})
    </insert>

    <delete id="deleteReviewLike">
        DELETE FROM review_like WHERE review_bno=#{reviewBno} AND email=#{email}
    </delete>

    <select id="getLike" resultType="int">
        SELECT like_cnt
        FROM review_board
        WHERE review_bno = #{reviewBno}
    </select>

    <select id="findNewReviewNo" resultType="long">
        select review_bno
        from (select * from review_board order by review_bno desc)
        where rownum = 1
    </select>

    <select id="isLiked" resultType="int">
        SELECT COUNT(*) FROM review_like WHERE email=#{email} AND review_bno=#{reviewBno}
    </select>

    <select id="getLikedList" resultType="long">
        SELECT review_bno FROM review_like WHERE email=#{email}
    </select>

    <insert id="saveReviewFileList">
        INSERT INTO review_upload (review_bno, file_path, file_name, file_size, file_type, file_byte, file_data)
        values (#{reviewBno}, #{filePath}, #{fileName}, #{fileSize}, #{fileType}, #{fileByte}, #{fileData})
    </insert>

    <update id="modifyReview">
        update review_board set title = #{title}, content = #{content}, private = #{isPrivate}, last_updated = sysdate, store_name = #{storeName}
        , store_address = #{storeAddress}, store_detail_address = #{storeDetailAddress}, store_extra_address = #{storeExtraAddress}, star_rate = #{starRate}
        where review_bno = #{reviewBno}
    </update>

    <delete id="deleteReviewFileList">
        delete from review_upload
        where review_bno = #{reviewBno}
        and file_name = #{fileName}
    </delete>

    <delete id="removeReview">
        delete from review_board
        where review_bno = #{reviewBno}
    </delete>

    <resultMap id="myPageReviewMap" type="com.project.foodiefoodie.review.dto.FileDataDTO">
        <result property="reviewBno" column="review_bno"/>
        <result property="fileData" column="file_data"/>
    </resultMap>


    <select id="reviewDataList" resultMap="myPageReviewMap">
        select file_data
        from review_upload
        where review_bno = #{reviewBno}
        order by review_bno
    </select>

    <select id="MyReviewCount" resultType="int">
        select count(*)
        from review_board
        where email = #{email}
    </select>

    <resultMap id="reviewNumMap" type="com.project.foodiefoodie.review.dto.ReviewNumDTO">
        <result property="reviewBno" column="review_bno"/>
    </resultMap>

    <select id="reviewNumList" resultMap="reviewNumMap">
        select review_bno from review_board
        where email = #{email}
    </select>


</mapper>